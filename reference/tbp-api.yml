openapi: 3.0.0
info:
  title: TBP API
  version: '1.0'
  contact: {}
  description: TBP API
servers:
  - url: 'https://api.thebotplatform.com/v1.0'
paths:
  /messages:
    get:
      summary: List messages
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                required:
                  - data
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      operationId: get-bot-messages
      description: List messages for a bot identified by botID
      parameters: []
    parameters: []
  /userattributes:
    parameters: []
    get:
      summary: Bot user attribute list
      tags: []
      operationId: get-bot-userattributes
      description: List user attributes for a bot
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAttribute'
                required:
                  - data
              examples: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
    post:
      summary: Bot user attribute create
      operationId: create-bot-userattribute
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserAttribute'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/NewUserAttribute'
            examples: {}
      description: Create user attribute for a bot
  '/userattributes/{userattributeID}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userattributeID
        in: path
        required: true
    get:
      summary: Get  user attribute value for a user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserAttribute'
                required:
                  - data
      operationId: get-userattribute-for-user
      description: Get the value of a user attribute for a given user
      parameters:
        - schema:
            type: string
          in: query
          name: user
          description: 'user identifier (email, external ID)'
    post:
      summary: Set a user attribute value for a user
      operationId: set-userattribute-for-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      description: Set the value of a user attribute for a given user
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
      parameters: []
  /activity:
    post:
      summary: Send a pre-defined message to a user
      operationId: activity-create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
                required:
                  - data
              examples: {}
      description: Send a CMS message to a given user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/NewActivity'
              required:
                - data
            examples:
              example-1:
                value:
                  data:
                    type: activity
                    attributes:
                      recipient: string
                      message:
                        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        description: ''
    parameters: []
  '/users/{user}':
    parameters:
      - schema:
          type: string
        name: user
        in: path
        required: true
        description: user id or email address
    patch:
      summary: ''
      operationId: update-user-data
      responses:
        '204':
          description: No Content
      description: Update user related data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/User'
            examples: {}
  /analytics:
    parameters: []
    get:
      summary: Bot analytics
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    uniqueItems: false
                    maxItems: 7
                    minItems: 5
                    items:
                      $ref: '#/components/schemas/Metric'
                required:
                  - data
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
      operationId: get-bot-analytics
      parameters:
        - schema:
            type: string
            format: date
            example: '2020-11-21'
          in: query
          name: date
          required: true
      description: Return top-line analytics for a given date
  /activity/external:
    post:
      summary: ''
      operationId: activity-external-create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ExternalActivity'
                required:
                  - data
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/NewExternalActivity'
              required:
                - data
            examples: {}
      description: Send a raw payload message to a given user
    parameters: []
components:
  schemas:
    Message:
      title: Message
      type: object
      description: Message
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - message
        attributes:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              example: Welcome Message
            parts:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    enum:
                      - text
                  text:
                    type: string
                    example: Welcome to the experience
                  buttons:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - postback
                            - open_url
                        title:
                          type: string
                          example: Click me to start
                        url:
                          type: string
                          format: uri
                          description: required if type=open_url
                        actions:
                          type: array
                          description: required if type=postback
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                                enum:
                                  - send_message
                              id:
                                type: string
                                format: uuid
                            required:
                              - type
                              - id
                      required:
                        - type
                        - title
                required:
                  - type
      required:
        - id
        - type
        - attributes
    UserAttribute:
      title: UserAttribute
      description: User attribute
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
          required:
            - id
        - $ref: '#/components/schemas/NewUserAttribute'
      x-examples: {}
    NewUserAttribute:
      title: NewUserAttribute
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          enum:
            - userattribute
        attributes:
          type: object
          required:
            - name
          properties:
            name:
              type: string
            is_pii:
              type: boolean
      required:
        - type
        - attributes
    NewActivity:
      title: NewActivity
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          enum:
            - activity
          default: activity
          example: activity
          readOnly: true
        attributes:
          type: object
          required:
            - recipient
            - message
          properties:
            recipient:
              type: string
              description: the email address or id of the user you want to send the message to
              example: user@thebotplatform.com
            message:
              format: uuid
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  description: the id of the message you want to send
      required:
        - type
        - attributes
      description: Used to send a message to a user
    Activity:
      title: Activity
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
          required:
            - id
        - $ref: '#/components/schemas/NewActivity'
      x-examples: {}
    Metric:
      title: Metric
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          enum:
            - ACTIVE_PEOPLE
            - NEW_VISITORS
            - UNIQUE_VISITORS
            - SUBSCRIBERS
            - UNSUBSCRIBES
            - TOTAL_MESSAGES_SENT
            - ENGAGEMENT_PER_USER
        type:
          type: string
          enum:
            - metric
        attributes:
          type: object
          required:
            - value
            - title
            - date
          properties:
            value:
              type: number
            title:
              type: string
            date:
              type: string
              format: date
      required:
        - id
        - type
        - attributes
    NewExternalActivity:
      title: NewExternalActivity
      type: object
      x-examples: {}
      properties:
        type:
          type: string
          enum:
            - external-activity
        attributes:
          type: object
          required:
            - recipient
            - messages
          properties:
            recipient:
              type: string
            messages:
              type: array
              items: {}
      required:
        - type
        - attributes
    ExternalActivity:
      title: ExternalActivity
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
          required:
            - id
        - $ref: '#/components/schemas/NewExternalActivity'
      x-examples: {}
    Errors:
      title: Errors
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      title: Error
      type: object
      properties:
        status:
          type: string
        title:
          type: string
        detail:
          type: string
      required:
        - status
        - title
    User:
      title: User
      type: object
      x-examples:
        example-1:
          type: user
          attributes:
            state:
              - userattribute:
                  id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                value: string
      properties:
        type:
          type: string
          enum:
            - user
        attributes:
          type: object
          properties:
            state:
              type: array
              items:
                type: object
                properties:
                  userattribute:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: ''
                  value:
                    type: string
      required:
        - type
  securitySchemes:
    token:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://api.thebotplatform.com/oauth2/token'
          refreshUrl: 'https://api.thebotplatform.com/oauth2/token'
          scopes: {}
        authorizationCode:
          authorizationUrl: 'https://api.thebotplatform.com/oauth2/auth'
          tokenUrl: 'https://api.thebotplatform.com/oauth2/token'
          refreshUrl: 'https://api.thebotplatform.com/oauth2/token'
          scopes: {}
      description: ''
  responses: {}
security:
  - token: []
